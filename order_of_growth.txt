Order of Growth
- a function f(n) is said to be growing faster than g(n) if 
  g(n) / f(n) = 0

- we can compare order of growth using
  - Ignore lower order terms
  - Ignore leading term constant

3 type of cases
- Best Case		- Constant time
- Average Case	- Linear Growth (based on some condition)
- Worst Case		- Linear Growth


Asymptotic Notations
Big O : Worst Case   -> Upper bound of algo
Theta : Average Case -> Exact or Upper
Omega : Best Case	  -> Lower bound


Analyzing Time Complexities :
===========================================
for(int i = 0; i < n; i++) {
	// Logic...
}
TC : O(n)

===========================================
for(int i = 0; i < n; i+c) {
	// Logic...
}
TC : θ(n)

===========================================
for(int i = n; i > 0; i-c) {
	// Logic...
}
TC : θ(n)

===========================================
for(int i = 1; i < n; i=i*c) {
	// Logic...
}
TC : O(logn)

===========================================
for(int i = n; i > 1; i=i/c) {
	// Logic...
}
TC : θ(logn)

===========================================
for(int i = 2; i < n; i=pow(i,c)) {
	// Logic...
}
TC : θ(loglogn)

===========================================
for(int i = 0; i < n; i++) {
	// Logic...
}

for(int i = 1; i < n; i=i*c) {
	// Logic...
}

for(int i = 1; i < 10; i++) {
	// Logic...
}

TC : 0(n)

===========================================
for(int i = 0; i < n; i++) {
	for(int j = 1; j < n; j=j*2) {
		// Logic...
	}	
}

TC : 0(nlogn)

============================================

Write a program to find LCM and HCF of 2 numbers using atleast 3 approaches.












